q
board
board.empty?(move)
n
move
n
display moves
s
n
pos
n
display dy
display dx
s
dy
dx
s
n
s
piece.moves
end_pos
piece.moves.include?(end_pos)
q
n
s
dx
n
display dy
display dx
display moves
quit
n
piece.moves
n
move_dirs
grow_unblocked_moves_in_dir(dx, dy)
n
display dy
display dx
q
n
display moves
n
display dy
display dx
n
exit
board
dup_board
n
piece
n
display start_pos
n
empty?(start_pos)
s
display pos
n
display end_pos
s
display move
display moves
n
s
exit
n
s
exit
n
move
moves
exit
start_pos
n
s
n
end_pos
s
moves
n
pieces.any? {|piece| piece.color != color && piece.moves.include?(pos_king)}
n
pos_king
s
end_pos
dup_board.move_piece(pos,end_pos)
n
piece.moves.include?(end_pos)
n
empty?(start_pos)
s
end_pos
pos
n
dup_board
n
s
display end_pos
s
display move
display moves
n
s
exit
n
s
n
end_pos
dup_board.move_piece(pos,end_pos)
move_into_check?(end_pos)
dup_board.in_check?(color)
color
n
display end_pos
s
display move
move
n
s
moves
exit
n
moves
exit
n
s
move_into_check?(move)
move
moves
exit
n
moves
move_into_check?(move)
n
dup_board.in_check?(color)
n
piece.moves.include?(end_pos)
n
start_pos
s
end_pos
pos
n
display end_pos
end_pos
start_pos
pos
s
dup_board
n
exit
n
piece.moves.include?(pos_king)
piece.color != color
n
display piece
n
q
n
q
n
display piece
n
piece
row
q
n
pos_king
exit
@nil
self == @nil
self
n
s
self[pos].empty?
pos
n
s
board.empty?(one_step)
board.valid_pos?(one_step)
one_step
n
one_step
n
exit
board.valid_pos?(one_step)
n
one_step
n
display cur_y
display cur_x
exit
n
display piece
rows
color
exit
cursor_pos
n
s
n
s
n
self.cursor_pos
n
self.cursor_pos
cursor_pos
@board.valid_pos?(diff)
exit
@board.valid_pos?(diff)
n
cursor_pos
n
diff
exit
n
@cursor_pos
n
key
continue
key
exit
piece.to_s.colorize( :background => :default)
piece.to_s
piece
n
piece.to_s.colorize( :background => :white)
n
display j
display i
exit
s
display i
